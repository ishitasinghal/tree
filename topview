Problem Statement

You are given a pointer to the root of a binary tree. 
Print the top view of the binary tree.
Example:
 1
    \
     2
      \
       5
      /  \
     3    6
      \
       4
       
       
Output:
Top View : 1 -> 2 -> 5 -> 6

CODE
#just the function

if root is None:    #checks if the root is null
        return
    queue1 = []
    dict1 = {}
    hdist = 0
    root.level = hdist
    queue1.append(root)
    while(len(queue1)):
        root = queue1[0]
        hdist = root.level
        if hdist not in dict1:
            dict1[hdist] = root.info
        if(root.left):
            root.left.level = hdist - 1
            queue1.append(root.left)
        if(root.right):
            root.right.level = hdist +1
            queue1.append(root.right)
        queue1.pop(0)
    for i in sorted(dict1):
        print(dict1[i] , end = " ")

    
ENTIRE CODE

class Node:
    def __init__(self, info): 
        self.info = info  
        self.left = None  
        self.right = None 
        self.level = None 

    def __str__(self):
        return str(self.info) 

class BinarySearchTree:
    def __init__(self): 
        self.root = None

    def create(self, val):  
        if self.root == None:
            self.root = Node(val)
        else:
            current = self.root
         
            while True:
                if val < current.info:
                    if current.left:
                        current = current.left
                    else:
                        current.left = Node(val)
                        break
                elif val > current.info:
                    if current.right:
                        current = current.right
                    else:
                        current.right = Node(val)
                        break
                else:
                    break

"""
Node is defined as
self.left (the left child of the node)
self.right (the right child of the node)
self.info (the value of the node)
"""
def topView(root):
    if root is None:    #checks if the root is null
        return
    queue1 = []
    dict1 = {}
    hdist = 0
    root.level = hdist
    queue1.append(root)
    while(len(queue1)):
        root = queue1[0]
        hdist = root.level
        if hdist not in dict1:
            dict1[hdist] = root.info
        if(root.left):
            root.left.level = hdist - 1
            queue1.append(root.left)
        if(root.right):
            root.right.level = hdist +1
            queue1.append(root.right)
        queue1.pop(0)
    for i in sorted(dict1):
        print(dict1[i] , end = " ")


    



tree = BinarySearchTree()
t = int(input())

arr = list(map(int, input().split()))

for i in range(t):
    tree.create(arr[i])

topView(tree.root)
