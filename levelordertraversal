Problem Statement

Print the level order traversal of this tree. In level order traversal, 
we visit the nodes level by level from left to right. You only have to 
complete the function.

Example:
    1
      \
       2
        \
         5
        /  \
       3    6
        \
         4  
         
Output:
1 -> 2 -> 5 -> 3 -> 6 -> 4

Function

from collections import deque
def levelOrder(root):
    q = deque([root])
    while q:
        n = q.popleft()
        if n:
            print(n.info, end=' ')
            q.extend([n.left, n.right])
            
 CODE
 
 class Node:
    def __init__(self, info): 
        self.info = info  
        self.left = None  
        self.right = None 
        self.level = None 

    def __str__(self):
        return str(self.info) 

class BinarySearchTree:
    def __init__(self): 
        self.root = None

    def create(self, val):  
        if self.root == None:
            self.root = Node(val)
        else:
            current = self.root
         
            while True:
                if val < current.info:
                    if current.left:
                        current = current.left
                    else:
                        current.left = Node(val)
                        break
                elif val > current.info:
                    if current.right:
                        current = current.right
                    else:
                        current.right = Node(val)
                        break
                else:
                    break

"""
Node is defined as
self.left (the left child of the node)
self.right (the right child of the node)
self.info (the value of the node)
"""
from collections import deque
def levelOrder(root):
    q = deque([root])
    while q:
        n = q.popleft()
        if n:
            print(n.info, end=' ')
            q.extend([n.left, n.right])



tree = BinarySearchTree()
t = int(input())

arr = list(map(int, input().split()))

for i in range(t):
    tree.create(arr[i])

levelOrder(tree.root)
